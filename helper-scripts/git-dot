#!/usr/bin/perl

use strict;

# @refs will be a list of git refs given on the command line
# %seen is a hash of identifiers to boolean true, just indicating that the object has been seen
# @links will be a list of tuples(lists) (start,end,label)
our (@refs,%commits,%trees,%blobs,%seen,@links);

sub short_hash {
    my $hash=$_[0];
    return substr($hash,0,7)
}

sub parse_args() {
    # Default to master branch if none listed
    if (! @ARGV) {
        push(@ARGV, "master");
    }
    my $cmd = "git rev-list " . join(' ', @ARGV);
    print "/* $cmd\n";
    my $commit_list = qx{$cmd};
    my @commit_list = split("\n", $commit_list);
    print join("\n", @commit_list);
    print "\n*/\n";
    return @commit_list;
}

sub examine_hashes {
    while (my $hash = shift) {
        examine_hash($hash);
    }
}

sub examine_hash {
    my $hash = $_[0];
    return if $seen{$hash};
    $seen{$hash} = 1;

    my $type = qx{git cat-file -t $hash}; chomp $type;
    my $size = qx{git cat-file -s $hash}; chomp $size;

    print "// examining {$hash} ($type, $size) - ";

    if ($type eq 'commit') {
        my $commit_text = qx{git cat-file -p $hash};
        my @new_links = $commit_text =~ /^(?:tree|parent) (\w+)/mg;
        my ($msg) = $commit_text =~ /\n\n(.+?)$/m;
        my $linkjoin = join(',',@new_links);
        print "msg: $msg, links: $linkjoin\n";
        $commits{$hash} = $msg;

        my $refs_text = qx{ git show-ref --heads --tags \\
                            | grep $hash \\
                            | awk "{print \\\$2}" };
        my @refs_list = split("\n", $refs_text);
        while (my ($i,$ref) = each @refs_list) {
            push(@refs, $ref);
            push(@links, [$ref,$hash]);
        }

        for my $link (@new_links) {
            push(@links, [$hash,$link]);
            examine_hash($link);
        }
    }

    elsif ($type eq 'tree') {
        print "TREE\n";
        $trees{$hash} = 1;
        my $tree_text = qx{git cat-file -p $hash};
        my @tree_lines = split(/\n/, $tree_text);
        while (my ($i, $line) = each @tree_lines) {
            my ($chash, $cpath) = $line =~ /\w+ \w+ (\w+)\s+(.*)/;
            push(@links, [$hash,$chash,$cpath]);
            examine_hash($chash);
        }
    }

    elsif ($type eq 'blob') {
        my $blob_text = qx{git cat-file -p $hash | head -n 4};
        $blobs{$hash} = $blob_text;
        print "BLOB\n";
    }
}

sub print_refs {
    print "\n\n// Refs\n{\n";
    while (my ($i, $ref) = each @refs) {
        print qq{   "$ref";\n};
    }
    print "}\n";
}

sub print_commits {
    print "\n\n// Commits\n{\n  rank=same\n";
    while (my ($hash, $msg) = each %commits) {
        my $short = short_hash($hash);
        $msg =~ s/(["])/\\$1/g;
        print qq{   "$hash"\[label="Commit $short\\n$msg"\]\n};
    }
    print "\}\n";
}

sub print_trees {
    print "\n\n// Trees\n{\n\n";
    while (my ($hash) = each %trees) {
        my $short = short_hash($hash);
        print qq{   "$hash"\[label="Tree\\n$short"\]\n};
    }
    print "\}\n";
}

sub print_blobs {
    print "\n\n// Blobs\n{\n\n";
    while (my ($hash, $msg) = each %blobs) {
        my $short = short_hash($hash);
        print qq{   "$hash"\[label="Blob\\n$short"\]\n};
    }
    print "\}\n";
}

sub print_links {
    print "\n\n// Links\n";
    for my $i (0 .. $#links) {
        my ($start, $end, $label) = ($links[$i][0], $links[$i][1], $links[$i][2]);
        print qq{"$start" -> "$end"};
        print qq{ \[label="$label"\]} if $label;
        print qq{\n};
    }
}

print "digraph git {\n";

my @commits = parse_args();
examine_hashes(@commits);

print_refs();
print_commits();
print_trees();
print_blobs();
print_links();

print "\n}\n";
